version: 2.1

parameters:
  node-version:
    type: string
    default: '22.11.0'

commands:
  yarn-install:
    steps:
      - run: yarn -v

      - run: date +"%Y-%m" > /tmp/month.txt && cat /tmp/month.txt
      - restore_cache:
          keys:
            - &yarn_cache yarn-{{ .Environment.NODE_MODULES_VERSION }}-{{ checksum "/tmp/month.txt" }}-{{ checksum "yarn.lock" }}
            - yarn-{{ .Environment.NODE_MODULES_VERSION }}-{{ checksum "/tmp/month.txt" }}-

      # yarn's state of installation
      - restore_cache:
          keys:
            - &yarn_state_cache yarn-install-state-{{ .Environment.NODE_MODULES_VERSION }}-{{ checksum "/tmp/month.txt" }}-{{ checksum "yarn.lock" }}
            - yarn-install-state-{{ .Environment.NODE_MODULES_VERSION }}-{{ checksum "/tmp/month.txt" }}-

      - run: yarn install --immutable

      #      - run:
      #          name: Fallback to installing node modules in case of cache corruption
      #          command: |-
      #            # Check if we restored cache and have node_modules already
      #            if [ -f "node_modules/.yarn-state.yml" ] && [ -f ".yarn/instalUSDC_l-state.gz" ]; then
      #              echo "node_modules restored from cache"
      #              exit 0
      #            else
      #              echo "node_modules could not be restored from cache, activating fallback installation"
      #              yarn install --immutable
      #            fi

      - save_cache:
          key: *yarn_cache
          paths:
            - 'node_modules'
            - '~/.cache/Cypress'

      - save_cache:
          key: *yarn_state_cache
          paths:
            - '.yarn/install-state.gz'

  install-foundry:
    steps:
      - restore_cache:
          keys:
            - &foundry_cache foundry-{{ .Environment.FOUNDRY_CACHE_VERSION }}-{{ .Environment.HOME }}

      - run:
          name: 'Install Foundry'
          working_directory: ~/
          environment:
            SHELL: /bin/bash
          command: |-
            export PATH="$PATH:$HOME/.foundry/bin"
            echo 'export PATH=$PATH:$HOME/.foundry/bin' >> $BASH_ENV
            if command -v curl; then
              curl --version
            else
              apt update && apt install --yes curl
            fi

            if command -v anvil; then
              echo "Anvil already installed"
              anvil --version
            else
              curl -L https://foundry.paradigm.xyz | bash
              foundryup
            fi

      - save_cache:
          key: *foundry_cache
          paths:
            - '~/.foundry'

  ipfs-deploy:
    parameters:
      source-dir:
        type: string
      ipfs-api:
        type: string
      ipns-key:
        type: string
      ipfs-cluster-api:
        type: string
    steps:
      - run:
          name: 'Install IPFS'
          command: |-
            LATEST_VERSION=$(curl -sSL https://dist.ipfs.tech/go-ipfs/versions | tail -n 1)
            LATEST_VERSION_NUMBER=${LATEST_VERSION#*v}
            DOWNLOAD_URL="https://dist.ipfs.tech/go-ipfs/${LATEST_VERSION}/go-ipfs_${LATEST_VERSION}_linux-amd64.tar.gz"
            echo "DOWNLOAD_URL=$DOWNLOAD_URL"
            curl -sSL -o ipfs.tar.gz $DOWNLOAD_URL
            tar -xzf ipfs.tar.gz
            sudo cp -f ./go-ipfs/ipfs /usr/local/bin/
            ipfs init

      - run:
          command: ipfs daemon
          background: true
      - run:
          name: 'Wait for IPFS daemon to start'
          command: wget --retry-connrefused --waitretry=20 --read-timeout=20 --timeout=15 -t 10 --post-data '' "http://localhost:5001/api/v0/version"

      - run: ipfs add --progress=true --pin=true --recursive "<< parameters.source-dir >>"
      - run:
          name: 'Save IPFS_CID'
          command: |-
            export IPFS_CID=$(ipfs add --progress=false --pin=true --recursive --quieter "<< parameters.source-dir >>")
            echo $IPFS_CID
            echo "export IPFS_CID=$IPFS_CID" >> $BASH_ENV
      - run:
          name: 'Pin to the remote IPFS node'
          command: curl --silent --request POST --user "$IPFS_USER:$IPFS_PASS" "<< parameters.ipfs-api >>/pin/add?recursive=true&progress=true&arg=$IPFS_CID"
      - run:
          name: 'Publish IPFS_CID to IPNS key << parameters.ipns-key >>'
          command: |-
            curl --silent --request POST --user "$IPFS_USER:$IPFS_PASS" "<< parameters.ipfs-api >>/name/publish?key=<< parameters.ipns-key >>&arg=$IPFS_CID" | tee /tmp/name-publish-$IPFS_CID.log
            cat /tmp/name-publish-$IPFS_CID.log | jq
      - run:
          name: 'Pin to Synthetix IPFS cluster'
          command: |-
            curl --silent --request POST --user "$IPFS_USER:$IPFS_PASS" "<< parameters.ipfs-cluster-api >>/pin/add?arg=$IPFS_CID" | tee /tmp/pin-add-$IPFS_CID.log
            cat /tmp/pin-add-$IPFS_CID.log | jq

jobs:
  checks:
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - install-foundry
      - yarn-install
      - run: yarn npm audit --recursive --severity critical
      - run: yarn dedupe --check
      - run: yarn deps
      - run: yarn deps:mismatched
      - run: yarn deps:circular
      - run: yarn pretty
      - run: yarn lint
      - run: yarn typecheck
      - run: yarn svg:check

  tests:
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - yarn-install
      - run: NODE_ENV=test yarn test --coverage --coverageReporters=json --reporters=jest-junit --runInBand
      - store_test_results:
          path: './junit.xml'
      - store_artifacts:
          path: 'coverage'

  e2e:
    parameters:
      dir:
        type: string
      parallelism:
        type: integer
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    resource_class: large
    parallelism: << parameters.parallelism >>
    steps:
      - checkout
      - install-foundry
      - yarn-install
      - run: sudo apt update
      - run: sudo apt install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libnss3 libxss1 libasound2 libxtst6 xauth xvfb lcov

      - run: date +"%Y-%W" > /tmp/week.txt && cat /tmp/week.txt
      - restore_cache:
          keys:
            - &anvil-fork-cache anvil-fork-cache-{{ .Environment.ANVIL_CACHE_VERSION }}-{{ checksum "/tmp/week.txt" }}-{{ .BuildNum }}
            - anvil-fork-cache-{{ .Environment.ANVIL_CACHE_VERSION }}-{{ checksum "/tmp/week.txt" }}-
            - anvil-fork-cache-{{ .Environment.ANVIL_CACHE_VERSION }}-

      - run:
          name: Run server localhost:3000
          working_directory: liquidity/ui
          command: NODE_ENV=test yarn start
          background: true

      - run:
          name: Wait for server localhost:3000
          command: wget --retry-connrefused --waitretry=20 --read-timeout=20 --timeout=15 -t 10 http://localhost:3000

      - run:
          name: 'Run tests'
          working_directory: liquidity/cypress
          command: |-
            echo "0" > /tmp/cypress_exit_code
            export NODE_ENV=test
            export CYPRESS_INFURA_KEY=$INFURA_KEY
            circleci tests glob 'cypress/e2e/<< parameters.dir >>/*.e2e.js' | circleci tests run --verbose --split-by=timings --command="xargs yarn cypress run --e2e --spec" || echo $? > /tmp/cypress_exit_code

      - save_cache:
          key: *anvil-fork-cache
          paths:
            - '~/.foundry/cache'

      - run:
          name: 'Upload coverage report to Codecov'
          command: |-
            curl -Os https://uploader.codecov.io/latest/linux/codecov
            chmod +x codecov
            ./codecov -t ${CODECOV_TOKEN} --file liquidity/cypress/.nyc_output/out.json

      - run: exit $(cat /tmp/cypress_exit_code)

      - store_test_results:
          path: 'liquidity/cypress/cypress/reports'

      - store_artifacts:
          path: 'liquidity/cypress/.nyc_output'
          destination: 'coverage'

      - store_artifacts:
          path: 'liquidity/cypress/cypress/screenshots'
          destination: 'screenshots'

      - store_artifacts:
          path: 'liquidity/cypress/cypress/videos'
          destination: 'videos'

  cy:
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    environment:
      NODE_ENV: test
    steps:
      - checkout
      - yarn-install
      - run: sudo apt update
      - run: sudo apt install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libnss3 libxss1 libasound2 libxtst6 xauth xvfb lcov

      - run:
          working_directory: liquidity/cypress
          command: yarn cypress run --component

      - run:
          name: 'Upload coverage report to Codecov'
          command: |-
            curl -Os https://uploader.codecov.io/latest/linux/codecov
            chmod +x codecov
            ./codecov -t ${CODECOV_TOKEN} --file liquidity/cypress/.nyc_output/out.json

      - store_test_results:
          path: 'liquidity/cypress/cypress/reports'

      - store_artifacts:
          path: 'liquidity/cypress/.nyc_output'
          destination: 'coverage'

      - store_artifacts:
          path: 'liquidity/cypress/cypress/screenshots'
          destination: 'screenshots'

      - store_artifacts:
          path: 'liquidity/cypress/cypress/videos'
          destination: 'videos'

  ipfs:
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    resource_class: large
    steps:
      - checkout
      - yarn-install
      - run: yarn workspace @snx-v3/liquidity build
      - ipfs-deploy:
          source-dir: './liquidity/ui/dist'
          ipfs-api: 'https://ipfs.synthetix.io:5001/api/v0'
          ipfs-cluster-api: 'https://ipfs.synthetix.io/api/v0'
          ipns-key: 'v3.synthetix.eth'

  contract-test:
    parameters:
      working_directory:
        type: string
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    resource_class: large
    steps:
      - checkout
      - install-foundry
      - yarn-install
      - run: sudo apt update
      - run: sudo apt install lcov

      - run: date +"%Y-%W" > /tmp/week.txt && cat /tmp/week.txt
      - restore_cache:
          keys:
            - &anvil-fork-cache anvil-fork-cache-{{ .Environment.ANVIL_CACHE_VERSION }}-{{ checksum "/tmp/week.txt" }}-{{ .BuildNum }}
            - anvil-fork-cache-{{ .Environment.ANVIL_CACHE_VERSION }}-{{ checksum "/tmp/week.txt" }}-
            - anvil-fork-cache-{{ .Environment.ANVIL_CACHE_VERSION }}-

      - run:
          name: 'Run tests'
          working_directory: << parameters.working_directory >>
          command: |-
            echo "0" > /tmp/test_exit_code
            forge coverage --threads 2 --memory-limit 6442450944 --report lcov --report-file lcov.info || echo $? > /tmp/test_exit_code
            lcov --rc derive_function_end_line=0 --remove lcov.info -o clean.lcov.info '../../node_modules/' 'test/' || true
            genhtml --rc derive_function_end_line=0 clean.lcov.info --output-directory coverage || true
            cp clean.lcov.info coverage/lcov.info || true

      - save_cache:
          key: *anvil-fork-cache
          paths:
            - '~/.foundry/cache'

      - run: exit $(cat /tmp/test_exit_code)

      - store_artifacts:
          path: '<< parameters.working_directory >>/coverage'

workflows:
  ui:
    unless:
      or:
        - equal: ['skip-tests', << pipeline.git.branch >>]

    jobs:
      - checks
      - tests

      - contract-test:
          name: pm-universal
          working_directory: 'contracts/position-manager'

      - contract-test:
          name: pm-usdc-andromeda
          working_directory: 'contracts/position-manager-andromeda-usdc'

      - contract-test:
          name: pm-statausdc-andromeda
          working_directory: 'contracts/position-manager-andromeda-statausdc'

      #- cy
      - e2e:
          name: e2e-base
          dir: '8453-andromeda'
          parallelism: 3
      - e2e:
          name: e2e-mainnet
          dir: '1-main'
          parallelism: 1

      - ipfs:
          requires:
            - checks
            - tests
            #- cy
            - e2e-base
            - e2e-mainnet
          filters:
            branches:
              only:
                - master
                - ipfs-deploy
